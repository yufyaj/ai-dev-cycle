name: Auto Implementation

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: '実装するIssue番号'
        required: true
        type: string

jobs:
  implement:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
      pull-requests: write
      issues: write
      actions: write  # ワークフローのdispatch権限

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git
        run: |
          git config user.name "Claude AI Agent"
          git config user.email "claude-agent@anthropic.com"

      - name: Get Issue details
        id: issue-details
        env:
          ISSUE_NUMBER: ${{ github.event.inputs.issue_number }}
        run: |
          # Issue情報を取得してJSONファイルに保存
          gh issue view "${ISSUE_NUMBER}" --json number,title,body,labels > issue.json

          # Issue情報を環境変数に設定
          TITLE=$(jq -r '.title' issue.json)
          BODY=$(jq -r '.body // ""' issue.json)
          echo "title=${TITLE}" >> $GITHUB_OUTPUT
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "${BODY}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "📋 Issue #${ISSUE_NUMBER}: ${TITLE}"

      - name: Create implementation branch
        env:
          ISSUE_NUMBER: ${{ github.event.inputs.issue_number }}
        run: |
          BRANCH_NAME="ai/cp-${ISSUE_NUMBER}"

          # main ブランチの最新を取得
          git checkout main
          git pull origin main

          # 既存ブランチがあれば削除
          git branch -D "${BRANCH_NAME}" 2>/dev/null || true
          git push origin --delete "${BRANCH_NAME}" 2>/dev/null || true

          # 新しいブランチを作成
          git checkout -b "${BRANCH_NAME}"
          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_ENV

          echo "🌿 ブランチ作成完了: ${BRANCH_NAME}"

      - name: Update issue status
        env:
          ISSUE_NUMBER: ${{ github.event.inputs.issue_number }}
        run: |
          gh issue comment "${ISSUE_NUMBER}" --body "🤖 **実装を開始しました**

          ブランチ: \`${{ env.branch_name }}\`

          処理中:
          - 📝 Issue の解析
          - 💻 コード生成
          - 🧪 テストコード生成（TDD）"

      - name: Claude Implementation
        uses: anthropics/claude-code-action@beta
        with:
          # OAuth token使用（MAX契約）
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

          # agentモード（workflow_dispatch対応）
          mode: 'agent'

          # direct_promptで自動実装（@claude不要）
          direct_prompt: |
            Issue #${{ github.event.inputs.issue_number }} を実装してください。

            タイトル: ${{ steps.issue-details.outputs.title }}

            内容:
            ${{ steps.issue-details.outputs.body }}

            以下の要件を守ってください：
            1. CLAUDE.mdのルールを厳守
            2. TDD原則でテストコードも実装
            3. PRサイズは10ファイル/500行以内
            4. 責務分離を遵守（レイヤー境界を守る）
            5. セキュリティを考慮（Secretsをコミットしない）

            必要なファイルを作成・編集して、実装を完成させてください。

      - name: Check implementation results
        id: check-impl
        run: |
          # 変更があるかチェック
          if [ -n "$(git status --porcelain)" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "✅ 実装が完了しました"

            # 変更ファイル数とライン数をチェック
            FILES_CHANGED=$(git diff --name-only | wc -l)
            LINES_CHANGED=$(git diff --stat | tail -n 1 | awk '{print $4}')

            echo "📊 変更統計:"
            echo "  - ファイル数: ${FILES_CHANGED}"
            echo "  - 変更行数: ${LINES_CHANGED}"

            # CLAUDE.mdの制限チェック (10ファイル / 500行)
            if [ "$FILES_CHANGED" -gt 10 ] || [ "${LINES_CHANGED:-0}" -gt 500 ]; then
              echo "⚠️ 警告: 変更が大きすぎます（制限: 10ファイル/500行）"
              echo "size_warning=true" >> $GITHUB_OUTPUT
            else
              echo "size_warning=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "❌ 実装する変更がありませんでした"
          fi

      - name: Commit implementation
        if: steps.check-impl.outputs.has_changes == 'true'
        env:
          ISSUE_NUMBER: ${{ github.event.inputs.issue_number }}
        run: |
          git add .
          git commit -m "feat: Issue #${ISSUE_NUMBER} の自動実装

          🤖 AI による自動実装
          - TDD原則に基づいたテストコード含む
          - CLAUDE.mdのルールに準拠

          Co-authored-by: Claude AI <claude-agent@anthropic.com>"

      - name: Push branch
        if: steps.check-impl.outputs.has_changes == 'true'
        run: |
          git push -u origin "${{ env.branch_name }}"
          echo "✅ ブランチをプッシュしました"

      - name: Trigger test workflow
        if: steps.check-impl.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = '${{ github.event.inputs.issue_number }}';
            const branchName = '${{ env.branch_name }}';

            console.log(`🧪 テストワークフローを起動します...`);

            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'auto-test.yml',
              ref: 'main',
              inputs: {
                issue_number: issueNumber,
                branch_name: branchName
              }
            });

            console.log(`✅ テストワークフローを起動しました`);

      - name: Update issue on failure
        if: failure()
        env:
          ISSUE_NUMBER: ${{ github.event.inputs.issue_number }}
        run: |
          gh issue comment "${ISSUE_NUMBER}" --body "❌ **実装に失敗しました**

          エラーの詳細は [ワークフローログ](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) を確認してください。

          人間の介入が必要な可能性があります。"

          gh issue edit "${ISSUE_NUMBER}" --remove-label "ai:implementing" --add-label "ai:failed"