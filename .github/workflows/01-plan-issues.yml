name: 01 Plan Issues (Tasks & CPM)

on:
  workflow_dispatch: {}
  push:
    paths:
      - 'requirements/**'
      - 'tasks.yaml'

permissions:
  contents: write
  issues: write

jobs:
  plan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Generate tasks.yaml (if missing)
        run: |
          if [ -f requirements/BRD.md ] && [ ! -f tasks.yaml ]; then \
            python3 scripts/task_extract.py; \
          fi

      - name: Compute CPM
        run: python3 scripts/cpm_build.py

      - name: Create/Update issues from tasks.yaml
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');
            const doc = yaml.load(fs.readFileSync('tasks.yaml','utf8'));

            for (const t of doc.tasks) {
              const title = `[${t.key}] ${t.title}`;
              const q = `repo:${context.repo.owner}/${context.repo.repo} is:issue in:title ${t.key}`;
              const found = await github.rest.search.issuesAndPullRequests({ q });
              let num = found.data.items?.[0]?.number;

              if (!num) {
                const res = await github.rest.issues.create({
                  owner: context.repo.owner, repo: context.repo.repo,
                  title, body: t.desc || '', labels: t.labels || ['ai:task']
                });
                num = res.data.number;
              } else {
                await github.rest.issues.update({
                  owner: context.repo.owner, repo: context.repo.repo, issue_number: num,
                  body: t.desc || ''
                });
              }
            }

      - name: Label CP order
        uses: actions/github-script@v7
        with:
          script: |
            const plan = JSON.parse(require('fs').readFileSync('critical_path.json','utf8'));
            const cp = plan.critical_path || [];
            for (let i=0; i<cp.length; i++) {
              const key = cp[i];
              const q = `repo:${context.repo.owner}/${context.repo.repo} is:issue in:title ${key}`;
              const found = await github.rest.search.issuesAndPullRequests({ q });
              if (found.data.items?.length) {
                const num = found.data.items[0].number;
                await github.rest.issues.addLabels({
                  owner: context.repo.owner, repo: context.repo.repo, issue_number: num,
                  labels: [ `cp:${i+1}`, 'cp:in-scope' ]
                });
              }
            }
