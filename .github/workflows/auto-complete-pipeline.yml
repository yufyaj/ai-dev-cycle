name: Auto Complete Pipeline

'on':
  workflow_dispatch:
    inputs:
      issue_number:
        description: '実装するIssue番号'
        required: true
        type: string
      max_retry_count:
        description: '各ステップの最大リトライ回数'
        required: false
        type: string
        default: '5'
      retry_count:
        description: '現在のリトライ回数（内部使用）'
        required: false
        type: string
        default: '0'
      feedback:
        description: '前回実行のフィードバック（内部使用）'
        required: false
        type: string
        default: ''

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
  ISSUE_NUMBER: ${{ github.event.inputs.issue_number }}
  MAX_RETRY: ${{ github.event.inputs.max_retry_count }}
  RETRY_COUNT: ${{ github.event.inputs.retry_count }}
  FEEDBACK: ${{ github.event.inputs.feedback }}

jobs:
  # =====================================
  # JOB 1: セットアップと実装
  # =====================================
  setup-and-implement:
    name: "1️⃣ セットアップ & 実装"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: write
      issues: write
      actions: write
    outputs:
      branch_name: ${{ steps.create-branch.outputs.branch_name }}
      issue_title: ${{ steps.issue-details.outputs.title }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git
        run: |
          git config user.name "Claude AI Agent"
          git config user.email "claude-agent@anthropic.com"

      - name: Get Issue details
        id: issue-details
        run: |
          gh issue view "${ISSUE_NUMBER}" --json number,title,body,labels > issue.json
          TITLE=$(jq -r '.title' issue.json)
          BODY=$(jq -r '.body // ""' issue.json)
          echo "title=${TITLE}" >> $GITHUB_OUTPUT
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "${BODY}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "📋 Issue #${ISSUE_NUMBER}: ${TITLE}"

      - name: Create implementation branch
        id: create-branch
        run: |
          BRANCH_NAME="ai/cp-${ISSUE_NUMBER}"
          git checkout main
          git pull origin main
          git branch -D "${BRANCH_NAME}" 2>/dev/null || true
          git push origin --delete "${BRANCH_NAME}" 2>/dev/null || true
          git checkout -b "${BRANCH_NAME}"
          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo "🌿 ブランチ作成完了: ${BRANCH_NAME}"

      - name: Update issue status
        run: |
          gh issue comment "${ISSUE_NUMBER}" --body "🚀 **統合パイプライン開始**

          処理フロー:
          1. ⏳ 実装中...
          2. ⏹️ 単体テスト
          3. ⏹️ コードレビュー
          4. ⏹️ セキュリティチェック
          5. ⏹️ PR作成"

      - name: Check for feedback
        id: check-feedback
        run: |
          if [ -n "${{ env.FEEDBACK }}" ]; then
            echo "📝 前回実行のフィードバックあり:"
            echo "${{ env.FEEDBACK }}"
            echo "has_feedback=true" >> $GITHUB_OUTPUT
          else
            echo "has_feedback=false" >> $GITHUB_OUTPUT
          fi

      - name: Implementation with Claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          mode: 'agent'
          direct_prompt: |
            Issue #${{ env.ISSUE_NUMBER }} を実装してください。

            タイトル: ${{ steps.issue-details.outputs.title }}

            内容:
            ${{ steps.issue-details.outputs.body }}

            ${{ steps.check-feedback.outputs.has_feedback == 'true' && format('⚠️ 前回実行での問題点（必ず対応してください）:\n{0}\n\nこれらの問題を解決するよう実装を見直してください。', env.FEEDBACK) || '' }}

            以下の要件を守ってください：
            1. CLAUDE.mdのルールを厳守
            2. TDD原則でテストコードも実装
            3. PRサイズは10ファイル/500行以内
            4. 責務分離を遵守（レイヤー境界を守る）
            5. セキュリティを考慮（Secretsをコミットしない）
            ${{ steps.check-feedback.outputs.has_feedback == 'true' && '6. 前回の問題点を必ず解決する' || '' }}

            必要なファイルを作成・編集して、実装を完成させてください。

      - name: Commit and push implementation
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "feat: Issue #${ISSUE_NUMBER} の実装

            🤖 AI による自動実装
            - TDD原則に基づいたテストコード含む
            - CLAUDE.mdのルールに準拠

            Co-authored-by: Claude AI <claude-agent@anthropic.com>"
            git push -u origin "${{ steps.create-branch.outputs.branch_name }}"
            echo "✅ 実装をコミット・プッシュしました"
          else
            echo "⚠️ 変更がありませんでした"
            exit 1
          fi

      - name: Prepare workspace for next jobs
        run: |
          mkdir -p out
          echo "${{ steps.create-branch.outputs.branch_name }}" > out/branch_name.txt
          echo "${{ steps.issue-details.outputs.title }}" > out/issue_title.txt

      - name: Upload workspace
        uses: actions/upload-artifact@v4
        with:
          name: workspace
          path: out/

  # =====================================
  # JOB 2: 単体テスト
  # =====================================
  test:
    name: "2️⃣ 単体テスト"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: setup-and-implement
    permissions:
      contents: write
      issues: write
      actions: write
    outputs:
      test_passed: ${{ steps.test-result.outputs.passed }}
      needs_reimplementation: ${{ steps.final-check.outputs.needs_reimplementation }}

    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup-and-implement.outputs.branch_name }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup environment
        run: |
          git config user.name "Claude AI Agent"
          git config user.email "claude-agent@anthropic.com"

          # Python依存関係をインストール
          pip install PyGithub requests pytest pytest-cov

          # Node.js依存関係をインストール（package.jsonが存在する場合）
          if [ -f package.json ]; then
            echo "📦 Node.jsプロジェクトを検出 - 依存関係をインストール"
            if [ -f package-lock.json ]; then
              echo "  package-lock.json使用: npm ci"
              npm ci
            else
              echo "  package.json使用: npm install"
              npm install
            fi
          fi

      - name: Download workspace
        uses: actions/download-artifact@v4
        with:
          name: workspace
          path: out/

      - name: Update issue status
        run: |
          gh issue comment "${ISSUE_NUMBER}" --body "🧪 **テスト実行中**

          処理フロー:
          1. ✅ 実装完了
          2. ⏳ 単体テスト実行中...
          3. ⏹️ コードレビュー
          4. ⏹️ セキュリティチェック
          5. ⏹️ PR作成"

      - name: Run tests
        id: test-execution
        continue-on-error: true
        run: |
          echo "🧪 テストを実行します..."
          python3 scripts/run_all_tests.py
          echo "exit_code=$?" >> $GITHUB_OUTPUT

      - name: Check test results
        id: test-result
        run: |
          if [ "${{ steps.test-execution.outputs.exit_code }}" == "0" ]; then
            echo "✅ テスト成功"
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "❌ テスト失敗"
            echo "passed=false" >> $GITHUB_OUTPUT
          fi

      - name: Fix test failures with Claude - Attempt 1
        if: steps.test-result.outputs.passed != 'true'
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          mode: 'agent'
          direct_prompt: |
            テストが失敗しました。エラーを修正してください。

            以下の手順で修正を実施してください：
            1. out/test_results.log ファイルからテストエラーログを確認
            2. エラーの原因を特定
            3. CLAUDE.mdのルールに従って修正コードを生成
            4. TDD原則に基づいて修正（テストが通るように実装を修正）
            5. 修正したファイルを保存

            これは修正試行 1回目/3回 です。

      - name: Commit and test - Attempt 1
        if: steps.test-result.outputs.passed != 'true'
        id: fix-attempt-1
        run: |
          # 修正をコミット
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "fix: テスト失敗の自動修正 (試行 1/3)

            🤖 AI によるテスト修正
            Issue #${ISSUE_NUMBER}

            Co-authored-by: Claude AI <claude-agent@anthropic.com>"
            git push
          fi

          # テスト再実行
          echo "🧪 修正後のテストを実行..."
          python3 scripts/run_all_tests.py
          if [ $? -eq 0 ]; then
            echo "✅ テスト成功！"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ テストがまだ失敗しています"
            echo "success=false" >> $GITHUB_OUTPUT
          fi

      - name: Fix test failures with Claude - Attempt 2
        if: steps.fix-attempt-1.outputs.success != 'true' && steps.test-result.outputs.passed != 'true'
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          mode: 'agent'
          direct_prompt: |
            前回の修正後もテストが失敗しています。再度修正を試みてください。

            前回とは異なるアプローチで修正を試みてください：
            1. out/test_results.log から最新のエラーを確認
            2. 前回の修正が不十分だった理由を分析
            3. より根本的な修正を実施
            4. 必要に応じてテストコード自体も修正可能

            これは修正試行 2回目/3回 です。

      - name: Commit and test - Attempt 2
        if: steps.fix-attempt-1.outputs.success != 'true' && steps.test-result.outputs.passed != 'true'
        id: fix-attempt-2
        run: |
          # 修正をコミット
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "fix: テスト失敗の自動修正 (試行 2/3)

            🤖 AI によるテスト修正（再試行）
            Issue #${ISSUE_NUMBER}

            Co-authored-by: Claude AI <claude-agent@anthropic.com>"
            git push
          fi

          # テスト再実行
          echo "🧪 修正後のテストを実行..."
          python3 scripts/run_all_tests.py
          if [ $? -eq 0 ]; then
            echo "✅ テスト成功！"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ テストがまだ失敗しています"
            echo "success=false" >> $GITHUB_OUTPUT
          fi

      - name: Fix test failures with Claude - Attempt 3
        if: steps.fix-attempt-2.outputs.success != 'true' && steps.fix-attempt-1.outputs.success != 'true' && steps.test-result.outputs.passed != 'true'
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          mode: 'agent'
          direct_prompt: |
            2回の修正試行後もテストが失敗しています。最後の修正を試みてください。

            最終試行として以下を検討してください：
            1. out/test_results.log から根本原因を再分析
            2. 設計レベルの問題がないか確認
            3. 環境依存の問題がないか確認
            4. 必要最小限の実装に簡素化することも検討

            これは最後の修正試行 3回目/3回 です。
            この試行で解決できない場合は、より大きな設計変更が必要かもしれません。

      - name: Commit and test - Attempt 3
        if: steps.fix-attempt-2.outputs.success != 'true' && steps.fix-attempt-1.outputs.success != 'true' && steps.test-result.outputs.passed != 'true'
        id: fix-attempt-3
        run: |
          # 修正をコミット
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "fix: テスト失敗の自動修正 (試行 3/3)

            🤖 AI によるテスト修正（最終試行）
            Issue #${ISSUE_NUMBER}

            Co-authored-by: Claude AI <claude-agent@anthropic.com>"
            git push
          fi

          # テスト再実行
          echo "🧪 修正後のテストを実行..."
          python3 scripts/run_all_tests.py
          if [ $? -eq 0 ]; then
            echo "✅ テスト成功！"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ 3回の修正試行後もテストが失敗しました"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Determine if reimplementation needed
        id: final-check
        run: |
          # どれか一つの試行でも成功したか確認
          TEST_SUCCESS=false
          if [ "${{ steps.test-result.outputs.passed }}" == "true" ]; then
            TEST_SUCCESS=true
            echo "✅ 初回テストで成功"
          elif [ "${{ steps.fix-attempt-1.outputs.success }}" == "true" ]; then
            TEST_SUCCESS=true
            echo "✅ 1回目の修正で成功"
          elif [ "${{ steps.fix-attempt-2.outputs.success }}" == "true" ]; then
            TEST_SUCCESS=true
            echo "✅ 2回目の修正で成功"
          elif [ "${{ steps.fix-attempt-3.outputs.success }}" == "true" ]; then
            TEST_SUCCESS=true
            echo "✅ 3回目の修正で成功"
          fi

          if [ "$TEST_SUCCESS" != "true" ]; then
            echo "🔄 3回の修正試行後もテスト失敗 - 再実装が必要です"
            echo "needs_reimplementation=true" >> $GITHUB_OUTPUT

            # フィードバック情報を作成
            cat > out/feedback.txt << EOF
          テストで以下の問題が解決できませんでした（3回の修正試行後）:
          - 最新のテストエラーはout/test_results.logを確認
          - 複数回の修正でも解決できない根本的な問題がある可能性

          実装を根本から見直してください:
          1. 設計レベルの問題がないか確認
          2. 要件の理解が正しいか確認
          3. より簡潔な実装アプローチを検討
          EOF
          else
            echo "needs_reimplementation=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: out/

  # =====================================
  # JOB 3: コードレビュー
  # =====================================
  review:
    name: "3️⃣ コードレビュー"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: test
    permissions:
      contents: write
      issues: write
      actions: write
    outputs:
      review_passed: ${{ steps.review-result.outputs.passed }}
      needs_reimplementation: ${{ steps.final-check.outputs.needs_reimplementation }}

    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup-and-implement.outputs.branch_name }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup environment
        run: |
          git config user.name "Claude AI Agent"
          git config user.email "claude-agent@anthropic.com"
          mkdir -p out

      - name: Update issue status
        run: |
          gh issue comment "${ISSUE_NUMBER}" --body "📝 **コードレビュー中**

          処理フロー:
          1. ✅ 実装完了
          2. ✅ 単体テスト成功
          3. ⏳ コードレビュー中...
          4. ⏹️ セキュリティチェック
          5. ⏹️ PR作成"

      - name: Get diff for review
        run: |
          git diff origin/main..HEAD > out/review_diff.patch
          git diff --name-only origin/main..HEAD > out/changed_files.txt
          FILES_CHANGED=$(git diff --name-only origin/main..HEAD | wc -l)
          LINES_ADDED=$(git diff --stat origin/main..HEAD | tail -n 1 | awk '{print $4}')
          echo "📊 変更統計: ${FILES_CHANGED}ファイル / ${LINES_ADDED:-0}行"

      - name: Code review with Claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          mode: 'agent'
          direct_prompt: |
            Issue #${{ env.ISSUE_NUMBER }} の実装をレビューしてください。

            以下の観点でレビューを実施してください：
            1. CLAUDE.mdルールの遵守
            2. アーキテクチャ原則（レイヤー境界、責務分離）
            3. TDD原則（テストの有無、品質）
            4. PRサイズ制限（10ファイル/500行）
            5. コード品質とベストプラクティス

            レビュー結果をout/review_result.jsonに以下の形式で保存してください：
            {
              "approved": true/false,
              "has_critical_issues": true/false,
              "issues": [
                {
                  "severity": "critical|high|medium|low",
                  "file": "ファイルパス",
                  "description": "問題の説明",
                  "suggestion": "修正案"
                }
              ],
              "summary": "レビューサマリー"
            }

            もしcriticalまたはhighの問題がある場合は、自動的に修正を実施してください。

      - name: Check review results
        id: review-result
        run: |
          if [ -f out/review_result.json ]; then
            APPROVED=$(python3 -c "import json; r=json.load(open('out/review_result.json')); print('true' if r.get('approved', False) else 'false')")
            echo "passed=${APPROVED}" >> $GITHUB_OUTPUT
            if [ "$APPROVED" != "true" ]; then
              echo "⚠️ レビューで問題が検出されました"
            else
              echo "✅ レビュー承認"
            fi
          else
            echo "passed=true" >> $GITHUB_OUTPUT
            echo "✅ レビュー完了（デフォルト承認）"
          fi

      - name: Commit review fixes
        if: steps.review-result.outputs.passed != 'true'
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "fix: レビュー指摘事項の修正

            🤖 AI によるレビュー修正
            Issue #${ISSUE_NUMBER}

            Co-authored-by: Claude AI <claude-agent@anthropic.com>"
            git push
          fi

      - name: Determine if reimplementation needed
        id: final-check
        run: |
          if [ -f out/review_result.json ]; then
            # レビュー結果から判定
            HAS_CRITICAL=$(python3 -c "import json; r=json.load(open('out/review_result.json')); issues=r.get('issues',[]); print('true' if any(i.get('severity') in ['critical'] for i in issues) else 'false')")

            if [ "$HAS_CRITICAL" == "true" ]; then
              echo "🔄 アーキテクチャレベルの問題を検出 - 再実装が必要です"
              echo "needs_reimplementation=true" >> $GITHUB_OUTPUT

              # フィードバック情報を作成
              python3 -c "import json; r=json.load(open('out/review_result.json')); fb=['レビューで以下のクリティカルな問題が検出されました:']; [fb.extend([f\"- {i.get('description')} ({i.get('file', 'N/A')})\", f\"  推奨: {i.get('suggestion', 'N/A')}\"]) for i in r.get('issues', []) if i.get('severity')=='critical']; open('out/feedback.txt', 'w').write('\n'.join(fb))"
            else
              echo "needs_reimplementation=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "needs_reimplementation=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload review results
        uses: actions/upload-artifact@v4
        with:
          name: review-results
          path: out/

  # =====================================
  # JOB 4: セキュリティチェック
  # =====================================
  security:
    name: "4️⃣ セキュリティチェック"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: review
    permissions:
      contents: write
      issues: write
      actions: write
      security-events: write
    outputs:
      security_passed: ${{ steps.security-result.outputs.passed }}
      needs_reimplementation: ${{ steps.final-check.outputs.needs_reimplementation }}

    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup-and-implement.outputs.branch_name }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup environment
        run: |
          git config user.name "Claude AI Agent"
          git config user.email "claude-agent@anthropic.com"
          mkdir -p out

      - name: Update issue status
        run: |
          gh issue comment "${ISSUE_NUMBER}" --body "🔒 **セキュリティチェック中**

          処理フロー:
          1. ✅ 実装完了
          2. ✅ 単体テスト成功
          3. ✅ コードレビュー完了
          4. ⏳ セキュリティチェック中...
          5. ⏹️ PR作成"

      - name: Security analysis with Claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          mode: 'agent'
          direct_prompt: |
            Issue #${{ env.ISSUE_NUMBER }} の実装に対してセキュリティ分析を実施してください。

            以下の観点で包括的なセキュリティ分析を実施してください：

            1. **Secrets・認証情報の検出**
               - ハードコードされたパスワード、APIキー、トークン
               - 環境変数への適切な外部化が必要な値

            2. **脆弱性チェック**
               - SQLインジェクション、XSS、CSRF
               - 認証・認可の不備
               - 安全でない暗号化方式

            3. **OWASP Top 10チェック**

            4. **コードセキュリティ**
               - 入力検証の不備
               - エラーハンドリングでの情報漏洩

            分析結果をout/security_analysis.jsonに以下の形式で保存してください：
            {
              "has_critical_issues": true/false,
              "has_secrets": true/false,
              "issues": [
                {
                  "severity": "critical|high|medium|low",
                  "type": "問題のタイプ",
                  "file": "ファイルパス",
                  "description": "問題の説明",
                  "recommendation": "修正方法"
                }
              ],
              "summary": "セキュリティ分析のサマリー"
            }

            もしcriticalな問題やSecretsが検出された場合は、自動的に修正を実施してください。

      - name: Check security results
        id: security-result
        run: |
          if [ -f out/security_analysis.json ]; then
            HAS_CRITICAL=$(python3 -c "import json; r=json.load(open('out/security_analysis.json')); print('true' if r.get('has_critical_issues', False) else 'false')")
            HAS_SECRETS=$(python3 -c "import json; r=json.load(open('out/security_analysis.json')); print('true' if r.get('has_secrets', False) else 'false')")

            if [ "$HAS_CRITICAL" == "true" ] || [ "$HAS_SECRETS" == "true" ]; then
              echo "⚠️ セキュリティ問題が検出されました"
              echo "passed=false" >> $GITHUB_OUTPUT
            else
              echo "✅ セキュリティチェック合格"
              echo "passed=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "passed=true" >> $GITHUB_OUTPUT
            echo "✅ セキュリティチェック完了（デフォルト合格）"
          fi

      - name: Commit security fixes
        if: steps.security-result.outputs.passed != 'true'
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "fix: セキュリティ問題の修正

            🔒 AI によるセキュリティ修正
            Issue #${ISSUE_NUMBER}

            Co-authored-by: Claude AI <claude-agent@anthropic.com>"
            git push
          fi

      - name: Determine if reimplementation needed
        id: final-check
        run: |
          if [ -f out/security_analysis.json ]; then
            # セキュリティ分析結果から判定
            HAS_CRITICAL=$(python3 -c "import json; r=json.load(open('out/security_analysis.json')); print('true' if r.get('has_critical_issues', False) else 'false')")
            HAS_SECRETS=$(python3 -c "import json; r=json.load(open('out/security_analysis.json')); print('true' if r.get('has_secrets', False) else 'false')")

            if [ "$HAS_SECRETS" == "true" ]; then
              echo "🔄 Secretsの埋め込みを検出 - 再実装が必要です"
              echo "needs_reimplementation=true" >> $GITHUB_OUTPUT

              # フィードバック情報を作成
              python3 -c "import json; s=json.load(open('out/security_analysis.json')); fb=['セキュリティ分析で以下の重大な問題が検出されました:']; [fb.extend([f\"- {i.get('description')} ({i.get('file', 'N/A')})\", f\"  推奨: {i.get('recommendation', 'N/A')}\"]) for i in s.get('issues', []) if i.get('severity')=='critical']; fb.extend(['- Secretsや認証情報のハードコーディングが検出されました', '  推奨: 環境変数またはGitHub Secretsを使用してください']) if s.get('has_secrets') else None; open('out/feedback.txt', 'w').write('\n'.join(fb))"
            else
              echo "needs_reimplementation=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "needs_reimplementation=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload security results
        uses: actions/upload-artifact@v4
        with:
          name: security-results
          path: out/

  # =====================================
  # JOB 5: PR作成
  # =====================================
  create-pr:
    name: "5️⃣ PR作成"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [setup-and-implement, test, review, security]
    if: |
      always() &&
      needs.test.result == 'success' &&
      needs.review.result == 'success' &&
      needs.security.result == 'success' &&
      needs.test.outputs.needs_reimplementation != 'true' &&
      needs.review.outputs.needs_reimplementation != 'true' &&
      needs.security.outputs.needs_reimplementation != 'true'
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup-and-implement.outputs.branch_name }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update issue status
        run: |
          gh issue comment "${ISSUE_NUMBER}" --body "📋 **PR作成中**

          処理フロー:
          1. ✅ 実装完了
          2. ✅ 単体テスト成功
          3. ✅ コードレビュー完了
          4. ✅ セキュリティチェック完了
          5. ⏳ PR作成中..."

      - name: Get change statistics
        id: stats
        run: |
          FILES_CHANGED=$(git diff --name-only origin/main..HEAD | wc -l)
          LINES_ADDED=$(git diff --stat origin/main..HEAD | tail -n 1 | awk '{print $4}')
          LINES_DELETED=$(git diff --stat origin/main..HEAD | tail -n 1 | awk '{print $6}')
          echo "files_changed=${FILES_CHANGED}" >> $GITHUB_OUTPUT
          echo "lines_added=${LINES_ADDED:-0}" >> $GITHUB_OUTPUT
          echo "lines_deleted=${LINES_DELETED:-0}" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        id: create-pr
        run: |
          # 既存のPRを確認
          EXISTING_PR=$(gh pr list --head "${{ needs.setup-and-implement.outputs.branch_name }}" --base main --json url --jq '.[0].url' || echo "")

          if [ -n "$EXISTING_PR" ]; then
            echo "✅ 既存のPRを使用: ${EXISTING_PR}"
            PR_URL="$EXISTING_PR"
          else
            # 新規PR作成
            PR_URL=$(gh pr create \
              --title "feat: Issue #${ISSUE_NUMBER} - ${{ needs.setup-and-implement.outputs.issue_title }}" \
              --body "## 📋 概要
            Issue #${ISSUE_NUMBER} の自動実装

            ## ✅ 完了項目
            - 🤖 AIによる自動実装
            - 🧪 単体テスト実行・成功
            - 📝 コードレビュー完了
            - 🔒 セキュリティチェック完了

            ## 📊 変更統計
            - ファイル数: ${{ steps.stats.outputs.files_changed }}
            - 追加行: ${{ steps.stats.outputs.lines_added }}
            - 削除行: ${{ steps.stats.outputs.lines_deleted }}

            ## 🧪 テスト結果
            全てのテストが成功しています。

            ## 🔒 セキュリティ
            セキュリティチェックをパスしています。

            ## 🤖 自動生成
            このPRは統合パイプラインにより自動生成されました。

            Closes #${ISSUE_NUMBER}" \
              --head "${{ needs.setup-and-implement.outputs.branch_name }}" \
              --base main)
            echo "✅ PR作成完了: ${PR_URL}"
          fi

          echo "pr_url=${PR_URL}" >> $GITHUB_OUTPUT

      - name: Update issue - Complete
        run: |
          gh issue comment "${ISSUE_NUMBER}" --body "🎉 **統合パイプライン完了！**

          処理フロー:
          1. ✅ 実装完了
          2. ✅ 単体テスト成功
          3. ✅ コードレビュー完了
          4. ✅ セキュリティチェック完了
          5. ✅ PR作成完了

          📌 **Pull Request**: ${{ steps.create-pr.outputs.pr_url }}

          全ての処理が正常に完了しました。PRのマージをお待ちください。"

          # ラベルを追加（存在しない場合はスキップ）
          gh issue edit "${ISSUE_NUMBER}" --add-label "ai:completed" || echo "⚠️ ラベル 'ai:completed' が存在しません（スキップ）"

      - name: Final summary
        run: |
          echo "======================================"
          echo "📊 統合パイプライン実行サマリー"
          echo "======================================"
          echo "Issue: #${ISSUE_NUMBER}"
          echo "ブランチ: ${{ needs.setup-and-implement.outputs.branch_name }}"
          echo "PR URL: ${{ steps.create-pr.outputs.pr_url }}"
          echo ""
          echo "各工程の結果:"
          echo "  - 実装: ✅"
          echo "  - テスト: ${{ needs.test.outputs.test_passed == 'true' && '✅' || '⚠️ (修正済み)' }}"
          echo "  - レビュー: ${{ needs.review.outputs.review_passed == 'true' && '✅' || '⚠️ (修正済み)' }}"
          echo "  - セキュリティ: ${{ needs.security.outputs.security_passed == 'true' && '✅' || '⚠️ (修正済み)' }}"
          echo "======================================"

  # =====================================
  # JOB 6: 再実装判定と再実行
  # =====================================
  check-and-retry:
    name: "🔄 再実装判定"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [test, review, security]
    if: |
      always() && (
        needs.test.outputs.needs_reimplementation == 'true' ||
        needs.review.outputs.needs_reimplementation == 'true' ||
        needs.security.outputs.needs_reimplementation == 'true'
      )
    permissions:
      contents: read
      issues: write
      actions: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check retry count
        id: check-retry
        run: |
          CURRENT_RETRY=${{ env.RETRY_COUNT }}
          MAX_RETRY=${{ env.MAX_RETRY }}
          echo "現在のリトライ回数: $CURRENT_RETRY / $MAX_RETRY"

          if [ "$CURRENT_RETRY" -ge "$MAX_RETRY" ]; then
            echo "❌ 最大リトライ回数に達しました"
            echo "can_retry=false" >> $GITHUB_OUTPUT
          else
            echo "can_retry=true" >> $GITHUB_OUTPUT
            NEXT_RETRY=$((CURRENT_RETRY + 1))
            echo "next_retry=$NEXT_RETRY" >> $GITHUB_OUTPUT
          fi

      - name: Collect feedback
        if: steps.check-retry.outputs.can_retry == 'true'
        id: collect-feedback
        run: |
          mkdir -p out
          FEEDBACK=""

          # 各ジョブからフィードバックを収集（簡略化版）
          echo "📝 フィードバックを収集中..."

          if [ "${{ needs.test.outputs.needs_reimplementation }}" == "true" ]; then
            FEEDBACK="${FEEDBACK}[テスト] 根本的な問題が検出されました。モジュール構造や依存関係を見直してください。\n"
          fi

          if [ "${{ needs.review.outputs.needs_reimplementation }}" == "true" ]; then
            FEEDBACK="${FEEDBACK}[レビュー] アーキテクチャレベルの問題があります。CLAUDE.mdのルールを確認してください。\n"
          fi

          if [ "${{ needs.security.outputs.needs_reimplementation }}" == "true" ]; then
            FEEDBACK="${FEEDBACK}[セキュリティ] Secretsのハードコーディングまたは重大な脆弱性が検出されました。\n"
          fi

          # フィードバックを保存
          echo -e "$FEEDBACK" > out/combined_feedback.txt
          echo "feedback<<EOF" >> $GITHUB_OUTPUT
          echo -e "$FEEDBACK" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update issue with retry information
        if: steps.check-retry.outputs.can_retry == 'true'
        run: |
          gh issue comment "${{ env.ISSUE_NUMBER }}" --body "🔄 **再実装が必要です**

          リトライ回数: ${{ steps.check-retry.outputs.next_retry }} / ${{ env.MAX_RETRY }}

          検出された問題:
          - テスト: ${{ needs.test.outputs.needs_reimplementation == 'true' && '要再実装' || 'OK' }}
          - レビュー: ${{ needs.review.outputs.needs_reimplementation == 'true' && '要再実装' || 'OK' }}
          - セキュリティ: ${{ needs.security.outputs.needs_reimplementation == 'true' && '要再実装' || 'OK' }}

          フィードバックを基に再実装を開始します..."

      - name: Trigger workflow retry
        if: steps.check-retry.outputs.can_retry == 'true'
        run: |
          echo "🔄 ワークフローを再実行します..."

          # ワークフローを再実行（フィードバック付き）
          gh workflow run auto-complete-pipeline.yml \
            --field issue_number="${{ env.ISSUE_NUMBER }}" \
            --field max_retry_count="${{ env.MAX_RETRY }}" \
            --field retry_count="${{ steps.check-retry.outputs.next_retry }}" \
            --field feedback="${{ steps.collect-feedback.outputs.feedback }}"

      - name: Final failure notification
        if: steps.check-retry.outputs.can_retry == 'false'
        run: |
          # 再実行用のフィードバック作成
          ESCAPED_FEEDBACK=$(echo "${{ steps.collect-feedback.outputs.feedback }}" | sed "s/'/''/g")

          gh issue comment "${{ env.ISSUE_NUMBER }}" --body "❌ **自動実装失敗**

          最大リトライ回数（${{ env.MAX_RETRY }}回）に達しました。

          手動での介入が必要です。以下の問題が解決できませんでした:
          - テスト: ${{ needs.test.outputs.needs_reimplementation == 'true' && '❌ 根本的な問題あり' || '✅' }}
          - レビュー: ${{ needs.review.outputs.needs_reimplementation == 'true' && '❌ アーキテクチャ問題あり' || '✅' }}
          - セキュリティ: ${{ needs.security.outputs.needs_reimplementation == 'true' && '❌ セキュリティ問題あり' || '✅' }}

          ---

          ## 📝 続きから実行する場合

          手動で修正後、または続きから再試行する場合は以下のコマンドを使用してください：

          \`\`\`bash
          gh workflow run auto-complete-pipeline.yml \\
            --field issue_number=${{ env.ISSUE_NUMBER }} \\
            --field max_retry_count=${{ env.MAX_RETRY }} \\
            --field retry_count=${{ env.RETRY_COUNT }} \\
            --field feedback='前回の失敗内容を基に修正を継続'
          \`\`\`

          または、より多くの試行回数で再開：

          \`\`\`bash
          gh workflow run auto-complete-pipeline.yml \\
            --field issue_number=${{ env.ISSUE_NUMBER }} \\
            --field max_retry_count=10 \\
            --field retry_count=${{ env.RETRY_COUNT }}
          \`\`\`"

          # コンソールにも出力
          echo ""
          echo "📝 続きから実行するには以下のコマンドを使用:"
          echo ""
          echo "gh workflow run auto-complete-pipeline.yml \\"
          echo "  --field issue_number=${{ env.ISSUE_NUMBER }} \\"
          echo "  --field max_retry_count=${{ env.MAX_RETRY }} \\"
          echo "  --field retry_count=${{ env.RETRY_COUNT }}"
          echo ""

          exit 1