name: Auto Complete Pipeline

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: '実装するIssue番号'
        required: true
        type: string
      max_retry_count:
        description: '各ステップの最大リトライ回数'
        required: false
        type: string
        default: '3'

jobs:
  complete-pipeline:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: write
      pull-requests: write
      issues: write
      actions: write
      security-events: write
      checks: write

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
      ISSUE_NUMBER: ${{ github.event.inputs.issue_number }}
      MAX_RETRY: ${{ github.event.inputs.max_retry_count }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup environment
        run: |
          # Git設定
          git config user.name "Claude AI Agent"
          git config user.email "claude-agent@anthropic.com"

          # Pythonセットアップ
          pip install PyGithub requests pytest pytest-cov

          # 作業ディレクトリ作成
          mkdir -p out

          # リトライカウンターの初期化
          echo "0" > out/test_retry_count
          echo "0" > out/review_retry_count
          echo "0" > out/security_retry_count

      - name: Get Issue details
        id: issue-details
        run: |
          # Issue情報を取得してJSONファイルに保存
          gh issue view "${ISSUE_NUMBER}" --json number,title,body,labels > issue.json

          # Issue情報を環境変数に設定
          TITLE=$(jq -r '.title' issue.json)
          BODY=$(jq -r '.body // ""' issue.json)
          echo "title=${TITLE}" >> $GITHUB_OUTPUT
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "${BODY}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "📋 Issue #${ISSUE_NUMBER}: ${TITLE}"

      - name: Create implementation branch
        id: create-branch
        run: |
          BRANCH_NAME="ai/cp-${ISSUE_NUMBER}"

          # main ブランチの最新を取得
          git checkout main
          git pull origin main

          # 既存ブランチがあれば削除
          git branch -D "${BRANCH_NAME}" 2>/dev/null || true
          git push origin --delete "${BRANCH_NAME}" 2>/dev/null || true

          # 新しいブランチを作成
          git checkout -b "${BRANCH_NAME}"
          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT

          echo "🌿 ブランチ作成完了: ${BRANCH_NAME}"

      - name: Update issue status - Starting
        run: |
          gh issue comment "${ISSUE_NUMBER}" --body "🚀 **統合パイプライン開始**

          処理フロー:
          1. ⏳ 実装中...
          2. ⏹️ 単体テスト
          3. ⏹️ コードレビュー
          4. ⏹️ セキュリティチェック
          5. ⏹️ PR作成

          最大リトライ回数: ${MAX_RETRY}回"

      # =====================================
      # STEP 1: 実装
      # =====================================
      - name: Implementation with Claude
        id: implementation
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          mode: 'agent'
          direct_prompt: |
            Issue #${{ env.ISSUE_NUMBER }} を実装してください。

            タイトル: ${{ steps.issue-details.outputs.title }}

            内容:
            ${{ steps.issue-details.outputs.body }}

            以下の要件を守ってください：
            1. CLAUDE.mdのルールを厳守
            2. TDD原則でテストコードも実装
            3. PRサイズは10ファイル/500行以内
            4. 責務分離を遵守（レイヤー境界を守る）
            5. セキュリティを考慮（Secretsをコミットしない）

            必要なファイルを作成・編集して、実装を完成させてください。

      - name: Commit implementation
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "feat: Issue #${ISSUE_NUMBER} の実装

            🤖 AI による自動実装
            - TDD原則に基づいたテストコード含む
            - CLAUDE.mdのルールに準拠

            Co-authored-by: Claude AI <claude-agent@anthropic.com>"
            echo "✅ 実装をコミットしました"
          else
            echo "⚠️ 変更がありませんでした"
          fi

      - name: Update issue status - Testing
        run: |
          gh issue comment "${ISSUE_NUMBER}" --body "📝 **実装完了 → テスト開始**

          処理フロー:
          1. ✅ 実装完了
          2. ⏳ 単体テスト実行中...
          3. ⏹️ コードレビュー
          4. ⏹️ セキュリティチェック
          5. ⏹️ PR作成"

      # =====================================
      # STEP 2: テスト（リトライループ付き）
      # =====================================
      - name: Run tests with retry
        id: test-phase
        run: |
          MAX_RETRY=${MAX_RETRY:-3}
          RETRY_COUNT=0
          TEST_PASSED=false

          while [ $RETRY_COUNT -lt $MAX_RETRY ]; do
            echo "🧪 テスト実行 (試行 $((RETRY_COUNT + 1))/${MAX_RETRY})"

            # テスト実行
            python3 scripts/run_all_tests.py
            TEST_EXIT_CODE=$?

            if [ $TEST_EXIT_CODE -eq 0 ]; then
              echo "✅ テスト成功"
              TEST_PASSED=true
              break
            else
              echo "❌ テスト失敗 (終了コード: $TEST_EXIT_CODE)"

              if [ $RETRY_COUNT -lt $((MAX_RETRY - 1)) ]; then
                echo "🔧 テストエラーを修正します..."

                # AIによる修正
                cat > /tmp/fix_test_prompt.txt << 'PROMPT_EOF'
          テストが失敗しました。エラーを修正してください。

          以下の手順で修正を実施してください：
          1. out/test_results.log ファイルからテストエラーログを確認
          2. エラーの原因を特定
          3. CLAUDE.mdのルールに従って修正コードを生成
          4. TDD原則に基づいて修正（テストが通るように実装を修正）
          5. 修正したファイルを保存
          PROMPT_EOF

                # Claude Code Actionは直接呼べないので、スクリプト内で処理
                echo "AIによる修正を試みます..."

                # 修正をコミット
                if [ -n "$(git status --porcelain)" ]; then
                  git add .
                  git commit -m "fix: テスト失敗の修正 (試行 $((RETRY_COUNT + 1)))

                  🤖 AI によるテスト修正
                  Issue #${ISSUE_NUMBER}

                  Co-authored-by: Claude AI <claude-agent@anthropic.com>"
                fi

                RETRY_COUNT=$((RETRY_COUNT + 1))
              else
                echo "⚠️ 最大リトライ回数に達しました"
                break
              fi
            fi
          done

          echo "test_passed=${TEST_PASSED}" >> $GITHUB_OUTPUT
          echo "${RETRY_COUNT}" > out/test_retry_count

      - name: Fix test failures with AI
        if: steps.test-phase.outputs.test_passed != 'true'
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          mode: 'agent'
          direct_prompt: |
            テストが失敗しました。エラーを修正してください。

            Issue #${{ env.ISSUE_NUMBER }}

            以下の手順で修正を実施してください：
            1. out/test_results.log ファイルからテストエラーログを確認
            2. エラーの原因を特定
            3. CLAUDE.mdのルールに従って修正コードを生成
            4. TDD原則に基づいて修正（テストが通るように実装を修正）
            5. 修正したファイルを保存

            修正が完了したら、変更内容をコミットしてください：
            - git add .
            - git commit -m "fix: テスト失敗の自動修正

            🤖 AI によるテスト修正
            Issue #${{ env.ISSUE_NUMBER }}

            Co-authored-by: Claude AI <claude-agent@anthropic.com>"

      - name: Update issue status - Review
        run: |
          gh issue comment "${ISSUE_NUMBER}" --body "🔍 **テスト完了 → レビュー開始**

          処理フロー:
          1. ✅ 実装完了
          2. ✅ 単体テスト成功
          3. ⏳ コードレビュー中...
          4. ⏹️ セキュリティチェック
          5. ⏹️ PR作成"

      # =====================================
      # STEP 3: レビュー（問題があれば修正してテストから再実行）
      # =====================================
      - name: Code review with Claude
        id: review-phase
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          mode: 'agent'
          direct_prompt: |
            Issue #${{ env.ISSUE_NUMBER }} の実装をレビューしてください。

            以下の観点でレビューを実施してください：
            1. CLAUDE.mdルールの遵守
            2. アーキテクチャ原則（レイヤー境界、責務分離）
            3. TDD原則（テストの有無、品質）
            4. PRサイズ制限（10ファイル/500行）
            5. コード品質とベストプラクティス

            レビュー結果をout/review_result.jsonに以下の形式で保存してください：
            {
              "approved": true/false,
              "has_critical_issues": true/false,
              "issues": [
                {
                  "severity": "critical|high|medium|low",
                  "file": "ファイルパス",
                  "description": "問題の説明",
                  "suggestion": "修正案"
                }
              ],
              "summary": "レビューサマリー"
            }

            もしcriticalまたはhighの問題がある場合は、自動的に修正を実施してください。
            修正後は変更をコミットしてください。

      - name: Check review results and fix if needed
        id: check-review
        run: |
          REVIEW_PASSED=true

          if [ -f out/review_result.json ]; then
            APPROVED=$(python3 -c "import json; r=json.load(open('out/review_result.json')); print('true' if r.get('approved', False) else 'false')")
            HAS_CRITICAL=$(python3 -c "import json; r=json.load(open('out/review_result.json')); print('true' if r.get('has_critical_issues', False) else 'false')")

            if [ "$APPROVED" != "true" ] || [ "$HAS_CRITICAL" == "true" ]; then
              echo "⚠️ レビューで問題が検出されました。修正が必要です。"
              REVIEW_PASSED=false

              # テストから再実行が必要
              echo "need_test_rerun=true" >> $GITHUB_OUTPUT
            fi
          fi

          echo "review_passed=${REVIEW_PASSED}" >> $GITHUB_OUTPUT

      - name: Re-run tests after review fixes
        if: steps.check-review.outputs.need_test_rerun == 'true'
        run: |
          echo "🔄 レビュー修正後のテストを再実行..."
          python3 scripts/run_all_tests.py

          if [ $? -ne 0 ]; then
            echo "❌ レビュー修正後のテストが失敗しました"
            exit 1
          fi

          echo "✅ レビュー修正後のテスト成功"

      - name: Update issue status - Security
        run: |
          gh issue comment "${ISSUE_NUMBER}" --body "🔒 **レビュー完了 → セキュリティチェック開始**

          処理フロー:
          1. ✅ 実装完了
          2. ✅ 単体テスト成功
          3. ✅ コードレビュー完了
          4. ⏳ セキュリティチェック中...
          5. ⏹️ PR作成"

      # =====================================
      # STEP 4: セキュリティチェック（問題があれば修正してテストから再実行）
      # =====================================
      - name: Security check with Claude
        id: security-phase
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          mode: 'agent'
          direct_prompt: |
            Issue #${{ env.ISSUE_NUMBER }} の実装に対してセキュリティ分析を実施してください。

            以下の観点で包括的なセキュリティ分析を実施してください：

            1. **Secrets・認証情報の検出**
               - ハードコードされたパスワード、APIキー、トークン
               - 環境変数への適切な外部化が必要な値

            2. **脆弱性チェック**
               - SQLインジェクション、XSS、CSRF
               - 認証・認可の不備
               - 安全でない暗号化方式

            3. **OWASP Top 10チェック**

            4. **コードセキュリティ**
               - 入力検証の不備
               - エラーハンドリングでの情報漏洩

            分析結果をout/security_analysis.jsonに以下の形式で保存してください：
            {
              "has_critical_issues": true/false,
              "has_secrets": true/false,
              "issues": [
                {
                  "severity": "critical|high|medium|low",
                  "type": "問題のタイプ",
                  "file": "ファイルパス",
                  "description": "問題の説明",
                  "recommendation": "修正方法"
                }
              ],
              "summary": "セキュリティ分析のサマリー"
            }

            もしcriticalな問題やSecretsが検出された場合は、自動的に修正を実施してください。

      - name: Check security results and fix if needed
        id: check-security
        run: |
          SECURITY_PASSED=true

          if [ -f out/security_analysis.json ]; then
            HAS_CRITICAL=$(python3 -c "import json; r=json.load(open('out/security_analysis.json')); print('true' if r.get('has_critical_issues', False) else 'false')")
            HAS_SECRETS=$(python3 -c "import json; r=json.load(open('out/security_analysis.json')); print('true' if r.get('has_secrets', False) else 'false')")

            if [ "$HAS_CRITICAL" == "true" ] || [ "$HAS_SECRETS" == "true" ]; then
              echo "⚠️ セキュリティ問題が検出されました。修正が必要です。"
              SECURITY_PASSED=false

              # テストから再実行が必要
              echo "need_test_rerun=true" >> $GITHUB_OUTPUT
            fi
          fi

          echo "security_passed=${SECURITY_PASSED}" >> $GITHUB_OUTPUT

      - name: Re-run tests after security fixes
        if: steps.check-security.outputs.need_test_rerun == 'true'
        run: |
          echo "🔄 セキュリティ修正後のテストを再実行..."
          python3 scripts/run_all_tests.py

          if [ $? -ne 0 ]; then
            echo "❌ セキュリティ修正後のテストが失敗しました"
            exit 1
          fi

          echo "✅ セキュリティ修正後のテスト成功"

      - name: Push branch
        run: |
          git push -u origin "${{ steps.create-branch.outputs.branch_name }}"
          echo "✅ ブランチをプッシュしました"

      - name: Update issue status - PR Creation
        run: |
          gh issue comment "${ISSUE_NUMBER}" --body "📝 **セキュリティチェック完了 → PR作成**

          処理フロー:
          1. ✅ 実装完了
          2. ✅ 単体テスト成功
          3. ✅ コードレビュー完了
          4. ✅ セキュリティチェック完了
          5. ⏳ PR作成中..."

      # =====================================
      # STEP 5: PR作成
      # =====================================
      - name: Create Pull Request
        id: create-pr
        run: |
          # 変更内容のサマリーを取得
          FILES_CHANGED=$(git diff --name-only origin/main..HEAD | wc -l)
          LINES_ADDED=$(git diff --stat origin/main..HEAD | tail -n 1 | awk '{print $4}')
          LINES_DELETED=$(git diff --stat origin/main..HEAD | tail -n 1 | awk '{print $6}')

          # PRを作成
          PR_URL=$(gh pr create \
            --title "feat: Issue #${ISSUE_NUMBER} - ${{ steps.issue-details.outputs.title }}" \
            --body "$(cat <<'PR_BODY'
          ## 📋 概要
          Issue #${{ env.ISSUE_NUMBER }} の自動実装

          ## ✅ 完了項目
          - 🤖 AIによる自動実装
          - 🧪 単体テスト実行・成功
          - 📝 コードレビュー完了
          - 🔒 セキュリティチェック完了

          ## 📊 変更統計
          - ファイル数: ${FILES_CHANGED}
          - 追加行: ${LINES_ADDED:-0}
          - 削除行: ${LINES_DELETED:-0}

          ## 🧪 テスト結果
          全てのテストが成功しています。

          ## 🔒 セキュリティ
          セキュリティチェックをパスしています。

          ## 🤖 自動生成
          このPRは統合パイプラインにより自動生成されました。

          Closes #${{ env.ISSUE_NUMBER }}
          PR_BODY
          )" \
            --head "${{ steps.create-branch.outputs.branch_name }}" \
            --base main)

          echo "pr_url=${PR_URL}" >> $GITHUB_OUTPUT
          echo "✅ PR作成完了: ${PR_URL}"

      - name: Update issue - Complete
        run: |
          gh issue comment "${ISSUE_NUMBER}" --body "🎉 **統合パイプライン完了！**

          処理フロー:
          1. ✅ 実装完了
          2. ✅ 単体テスト成功
          3. ✅ コードレビュー完了
          4. ✅ セキュリティチェック完了
          5. ✅ PR作成完了

          📌 **Pull Request**: ${{ steps.create-pr.outputs.pr_url }}

          全ての処理が正常に完了しました。PRのマージをお待ちください。"

          # 完了ラベルを追加
          gh issue edit "${ISSUE_NUMBER}" --add-label "ai:completed"

      - name: Final summary
        if: always()
        run: |
          echo "======================================"
          echo "📊 統合パイプライン実行サマリー"
          echo "======================================"
          echo "Issue: #${ISSUE_NUMBER}"
          echo "ブランチ: ${{ steps.create-branch.outputs.branch_name }}"
          echo "PR URL: ${{ steps.create-pr.outputs.pr_url }}"
          echo ""
          echo "テストリトライ回数: $(cat out/test_retry_count)"
          echo "レビューステータス: ${{ steps.check-review.outputs.review_passed }}"
          echo "セキュリティステータス: ${{ steps.check-security.outputs.security_passed }}"
          echo "======================================"