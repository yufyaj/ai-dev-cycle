name: Auto Create PR

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue番号'
        required: true
        type: string
      branch_name:
        description: 'ブランチ名'
        required: true
        type: string

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

jobs:
  create-pr:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      issues: write
      contents: write
      pull-requests: write
      actions: write  # ワークフローのdispatch権限（必要に応じて）

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch_name }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install PyGithub requests

      - name: Update issue status
        env:
          ISSUE_NUMBER: ${{ github.event.inputs.issue_number }}
        run: |
          gh issue comment "${ISSUE_NUMBER}" --body "📝 **Pull Request を作成中**

          PRに含まれる内容:
          - ✅ 実装完了
          - ✅ テスト合格
          - ✅ レビュー完了
          - ✅ セキュリティチェック完了"

      - name: Gather implementation summary
        id: gather-summary
        env:
          ISSUE_NUMBER: ${{ github.event.inputs.issue_number }}
        run: |
          # Issue情報を取得
          python3 << 'EOF'
          import os
          import json
          from github import Github

          g = Github(os.environ['GITHUB_TOKEN'])
          repo = g.get_repo(os.environ['GITHUB_REPOSITORY'])
          issue = repo.get_issue(int(os.environ['ISSUE_NUMBER']))

          # 変更の統計を取得
          import subprocess
          diff_stat = subprocess.run(['git', 'diff', '--stat', 'origin/main..HEAD'],
                                    capture_output=True, text=True).stdout

          files_changed = subprocess.run(['git', 'diff', '--name-only', 'origin/main..HEAD'],
                                        capture_output=True, text=True).stdout.splitlines()

          # PR用のデータを準備
          pr_data = {
            'issue_number': issue.number,
            'issue_title': issue.title,
            'issue_body': issue.body,
            'files_changed': files_changed,
            'diff_stat': diff_stat,
            'labels': [label.name for label in issue.labels]
          }

          with open('out/pr_data.json', 'w', encoding='utf-8') as f:
            json.dump(pr_data, f, ensure_ascii=False, indent=2)

          print(f"📊 Issue #{issue.number}: {issue.title}")
          print(f"変更ファイル数: {len(files_changed)}")
          EOF

      - name: Create PR with detailed description
        id: create-pr
        env:
          ISSUE_NUMBER: ${{ github.event.inputs.issue_number }}
          BRANCH_NAME: ${{ github.event.inputs.branch_name }}
        run: |
          python3 scripts/create_pr_from_issue.py

          # PR番号を取得
          PR_NUMBER=$(gh pr list --head "${BRANCH_NAME}" --json number --jq '.[0].number')
          echo "pr_number=${PR_NUMBER}" >> $GITHUB_OUTPUT

          if [ -n "$PR_NUMBER" ]; then
            echo "✅ PR #${PR_NUMBER} を作成しました"
          else
            echo "❌ PR作成に失敗しました"
            exit 1
          fi

      - name: Add labels and assignees
        if: steps.create-pr.outputs.pr_number != ''
        env:
          PR_NUMBER: ${{ steps.create-pr.outputs.pr_number }}
          ISSUE_NUMBER: ${{ github.event.inputs.issue_number }}
        run: |
          # PR にラベルを追加
          gh pr edit "${PR_NUMBER}" --add-label "ai:generated" --add-label "auto-merge"

          # Issue からラベルを継承
          ISSUE_LABELS=$(gh issue view "${ISSUE_NUMBER}" --json labels --jq '.labels[].name' | tr '\n' ',')
          if [ -n "$ISSUE_LABELS" ]; then
            gh pr edit "${PR_NUMBER}" --add-label "${ISSUE_LABELS%,}"
          fi

          # Issue をリンク
          gh pr edit "${PR_NUMBER}" --body "$(gh pr view ${PR_NUMBER} --json body --jq '.body')

          Closes #${ISSUE_NUMBER}"

      - name: Enable auto-merge
        if: steps.create-pr.outputs.pr_number != ''
        env:
          PR_NUMBER: ${{ steps.create-pr.outputs.pr_number }}
        run: |
          # Auto-merge を有効化
          gh pr merge "${PR_NUMBER}" --auto --squash || echo "Auto-merge設定に失敗（権限不足の可能性）"

      - name: Request review
        if: steps.create-pr.outputs.pr_number != ''
        env:
          PR_NUMBER: ${{ steps.create-pr.outputs.pr_number }}
        run: |
          # CODEOWNERS からレビュアーを自動設定
          if [ -f .github/CODEOWNERS ]; then
            # CODEOWNERSから適切なレビュアーを抽出（簡略化）
            echo "📧 レビュアーを自動設定中..."
          fi

          # デフォルトレビュアーがいる場合は設定
          # gh pr edit "${PR_NUMBER}" --add-reviewer "username"

      - name: Update issue with PR link
        if: always()
        env:
          ISSUE_NUMBER: ${{ github.event.inputs.issue_number }}
          PR_NUMBER: ${{ steps.create-pr.outputs.pr_number }}
        run: |
          if [ -n "${PR_NUMBER}" ]; then
            gh issue comment "${ISSUE_NUMBER}" --body "🎉 **Pull Request を作成しました！**

            PR: #${PR_NUMBER}

            含まれる変更:
            $(gh pr view ${PR_NUMBER} --json additions,deletions,changedFiles --jq '
            "- 📝 変更ファイル: \(.changedFiles)
            - ➕ 追加行: \(.additions)
            - ➖ 削除行: \(.deletions)"
            ')

            ステータス:
            - ✅ 実装完了
            - ✅ テスト成功
            - ✅ レビュー済み
            - ✅ セキュリティチェック完了
            - ⏳ マージ待ち

            自動マージが有効になっています。承認後に自動的にマージされます。

            ---
            🤖 このPRはAIによって自動生成されました。"

            # Issue のラベルを更新
            gh issue edit "${ISSUE_NUMBER}" --remove-label "ai:implementing" --add-label "ai:pr-created"
          else
            gh issue comment "${ISSUE_NUMBER}" --body "❌ **PR作成に失敗しました**

            詳細は [ワークフローログ](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) を確認してください。

            手動での対応が必要です。"

            gh issue edit "${ISSUE_NUMBER}" --add-label "ai:pr-failed"
          fi

      - name: Trigger next issue if available
        if: steps.create-pr.outputs.pr_number != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log(`🔄 次のIssueの処理を確認中...`);

            // メインオーケストレーターを再度起動
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'main-orchestrator.yml',
              ref: 'main'
            });

            console.log(`✅ オーケストレーターを起動しました`);

      - name: Generate final report
        if: always()
        run: |
          python3 << 'EOF'
          import json
          import os

          # 最終レポート作成
          report = {
            "issue_number": os.environ.get('ISSUE_NUMBER'),
            "branch": os.environ.get('BRANCH_NAME'),
            "pr_number": os.environ.get('PR_NUMBER'),
            "timestamp": os.popen('date -Iseconds').read().strip(),
            "status": "success" if os.environ.get('PR_NUMBER') else "failed",
            "pipeline_summary": {
              "implementation": "✅",
              "testing": "✅",
              "review": "✅",
              "security": "✅",
              "pr_creation": "✅" if os.environ.get('PR_NUMBER') else "❌"
            }
          }

          with open('out/final_report.json', 'w') as f:
            json.dump(report, f, indent=2)

          print("📊 最終レポートを生成しました")
          EOF
        env:
          ISSUE_NUMBER: ${{ github.event.inputs.issue_number }}
          BRANCH_NAME: ${{ github.event.inputs.branch_name }}
          PR_NUMBER: ${{ steps.create-pr.outputs.pr_number }}