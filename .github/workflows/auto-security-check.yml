name: Auto Security Check

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue番号'
        required: true
        type: string
      branch_name:
        description: 'ブランチ名'
        required: true
        type: string

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

jobs:
  security-check:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      issues: write
      contents: write
      pull-requests: write
      actions: write  # ワークフローのdispatch権限
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch_name }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git
        run: |
          git config user.name "Claude AI Agent"
          git config user.email "claude-agent@anthropic.com"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          # AI分析用の基本パッケージのみ
          pip install PyGithub requests

      - name: Update issue status
        env:
          ISSUE_NUMBER: ${{ github.event.inputs.issue_number }}
        run: |
          gh issue comment "${ISSUE_NUMBER}" --body "🔒 **セキュリティチェックを実行中**

          チェック項目:
          - 🔍 依存関係の脆弱性スキャン
          - 🛡️ コードセキュリティ分析
          - 🔑 Secrets・認証情報の検出
          - 📋 OWASP Top 10 チェック
          - 🚨 XSS/CSRF対策の確認"

      - name: AI Security Analysis with Claude
        id: ai-security
        uses: anthropics/claude-code-action@beta
        with:
          # OAuth token使用（MAX契約）
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

          # agentモード（workflow_dispatch対応）
          mode: 'agent'

          # direct_promptでAIセキュリティ分析（@claude不要）
          direct_prompt: |
            Issue #${{ github.event.inputs.issue_number }} の実装に対してセキュリティ分析を実施してください。

            ブランチ: ${{ github.event.inputs.branch_name }}

            以下の観点で包括的なセキュリティ分析を実施してください：

            1. **Secrets・認証情報の検出**
               - ハードコードされたパスワード、APIキー、トークン
               - プライベートキーや証明書
               - データベース接続文字列
               - AWS/GCP/Azureのクレデンシャル
               - 環境変数への適切な外部化が必要な値

            2. **脆弱性チェック**
               - SQLインジェクション
               - XSS（クロスサイトスクリプティング）
               - CSRF（クロスサイトリクエストフォージェリ）
               - 認証・認可の不備
               - 安全でない暗号化方式
               - パストラバーサル

            3. **OWASP Top 10チェック**
               - インジェクション攻撃の可能性
               - 認証の欠陥
               - 機密データの露出
               - XXE（XML外部エンティティ）
               - アクセス制御の不備
               - セキュリティ設定の不備

            4. **コードセキュリティ**
               - 入力検証の不備
               - エラーハンドリングでの情報漏洩
               - ログへのセンシティブ情報記録
               - 安全でない乱数生成
               - レースコンディション

            分析結果をout/security_analysis.jsonに以下の形式で保存してください：
            {
              "has_critical_issues": true/false,
              "has_secrets": true/false,
              "issue_count": {
                "critical": 数値,
                "high": 数値,
                "medium": 数値,
                "low": 数値
              },
              "issues": [
                {
                  "severity": "critical|high|medium|low",
                  "type": "問題のタイプ",
                  "file": "ファイルパス",
                  "description": "問題の説明",
                  "recommendation": "修正方法"
                }
              ],
              "summary": "セキュリティ分析のサマリー"
            }

            分析が完了したら、結果に基づいて適切な判定を行ってください。

      - name: Check AI security analysis results
        id: check-security
        run: |
          echo "📊 AI分析結果を確認中..."

          # 分析結果ファイルが存在するかチェック
          if [ -f out/security_analysis.json ]; then
            # JSONから値を抽出
            HAS_CRITICAL=$(python3 -c "import json; r=json.load(open('out/security_analysis.json')); print('true' if r.get('has_critical_issues', False) else 'false')")
            HAS_SECRETS=$(python3 -c "import json; r=json.load(open('out/security_analysis.json')); print('true' if r.get('has_secrets', False) else 'false')")
            CRITICAL_COUNT=$(python3 -c "import json; r=json.load(open('out/security_analysis.json')); print(r.get('issue_count', {}).get('critical', 0))")
            HIGH_COUNT=$(python3 -c "import json; r=json.load(open('out/security_analysis.json')); print(r.get('issue_count', {}).get('high', 0))")

            echo "has_critical_issues=${HAS_CRITICAL}" >> $GITHUB_OUTPUT
            echo "has_secrets=${HAS_SECRETS}" >> $GITHUB_OUTPUT
            echo "critical_issues=${CRITICAL_COUNT}" >> $GITHUB_OUTPUT
            echo "high_issues=${HIGH_COUNT}" >> $GITHUB_OUTPUT

            # サマリーを表示
            python3 << 'EOF'
import json
with open('out/security_analysis.json', 'r') as f:
    data = json.load(f)
    print("\n📋 セキュリティ分析サマリー:")
    print(f"  🚨 Critical: {data['issue_count']['critical']}")
            print(f"  ⚠️  High: {data['issue_count']['high']}")
            print(f"  ⚡ Medium: {data['issue_count']['medium']}")
            print(f"  📝 Low: {data['issue_count']['low']}")
            print(f"\n{data.get('summary', '')}")
EOF
          else
            # 分析結果がない場合（Claude Actionが失敗した場合）
            echo "⚠️ AI分析結果が見つかりません。デフォルト値を使用します。"
            echo "has_critical_issues=false" >> $GITHUB_OUTPUT
            echo "has_secrets=false" >> $GITHUB_OUTPUT
            echo "critical_issues=0" >> $GITHUB_OUTPUT
            echo "high_issues=0" >> $GITHUB_OUTPUT
          fi

      - name: Fix critical security issues with AI
        if: steps.check-security.outputs.has_critical_issues == 'true' || steps.check-security.outputs.has_secrets == 'true'
        uses: anthropics/claude-code-action@beta
        with:
          # OAuth token使用（MAX契約）
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

          # agentモード（workflow_dispatch対応）
          mode: 'agent'

          # direct_promptでセキュリティ修正（@claude不要）
          direct_prompt: |
            セキュリティ分析で検出された問題を修正してください。

            Issue #${{ github.event.inputs.issue_number }}
            ブランチ: ${{ github.event.inputs.branch_name }}

            以下の手順で修正を実施してください：
            1. out/security_analysis.json を読み込んで検出された問題を確認
            2. criticalとhighの問題は必ず修正
            3. Secretsが検出された場合は環境変数に移動
            4. 各問題の "recommendation" に従って修正を実施

            修正が完了したら、変更内容をコミットしてください：
            - git add .
            - git commit -m "fix: セキュリティ問題の自動修正

            🔒 AIによるセキュリティ脆弱性の修正
            Issue #${{ github.event.inputs.issue_number }}

            Co-authored-by: Claude AI <claude-agent@anthropic.com>"
            - git push

      - name: Generate security report
        if: always()
        run: |
          python3 << 'EOF'
          import json
          import os

          # セキュリティレポート作成
          report = {
            "issue_number": os.environ.get('ISSUE_NUMBER'),
            "branch": os.environ.get('BRANCH_NAME'),
            "has_critical_issues": os.environ.get('has_critical_issues', 'false'),
            "has_secrets": os.environ.get('has_secrets', 'false'),
            "critical_count": os.environ.get('critical_issues', '0'),
            "high_count": os.environ.get('high_issues', '0'),
            "timestamp": os.popen('date -Iseconds').read().strip(),
            "passed": (
              os.environ.get('has_critical_issues') == 'false' and
              os.environ.get('has_secrets') == 'false'
            )
          }

          with open('out/security_summary.json', 'w') as f:
            json.dump(report, f, indent=2)

          print("📊 セキュリティレポートを生成しました")
          EOF
        env:
          ISSUE_NUMBER: ${{ github.event.inputs.issue_number }}
          BRANCH_NAME: ${{ github.event.inputs.branch_name }}
          has_critical_issues: ${{ steps.check-security.outputs.has_critical_issues }}
          has_secrets: ${{ steps.check-security.outputs.has_secrets }}
          critical_issues: ${{ steps.check-security.outputs.critical_issues }}
          high_issues: ${{ steps.check-security.outputs.high_issues }}

      - name: Check if security passed
        id: security-result
        run: |
          PASSED=$(python3 -c "import json; print(json.load(open('out/security_summary.json'))['passed'])")
          echo "security_passed=${PASSED}" >> $GITHUB_OUTPUT

      - name: Trigger PR creation workflow
        if: steps.security-result.outputs.security_passed == 'True'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = '${{ github.event.inputs.issue_number }}';
            const branchName = '${{ github.event.inputs.branch_name }}';

            console.log(`🚀 PR作成ワークフローを起動します...`);

            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'auto-create-pr.yml',
              ref: 'main',
              inputs: {
                issue_number: issueNumber,
                branch_name: branchName
              }
            });

            console.log(`✅ PR作成ワークフローを起動しました`);

      - name: Update issue with security results
        if: always()
        env:
          ISSUE_NUMBER: ${{ github.event.inputs.issue_number }}
        run: |
          if [ "${{ steps.security-result.outputs.security_passed }}" == "True" ]; then
            gh issue comment "${ISSUE_NUMBER}" --body "✅ **セキュリティチェック完了**

            AIセキュリティ分析結果:
            - Secrets検出: ✅ なし
            - Critical問題: ✅ なし
            - High問題: ${{ steps.check-security.outputs.high_issues }}個
            - セキュリティ: ✅ AIによる包括的な分析完了

            次のステップ: PR作成"
          else
            gh issue comment "${ISSUE_NUMBER}" --body "⚠️ **セキュリティ問題が検出されました**

            AIセキュリティ分析結果:
            - Secrets検出: ${{ steps.check-security.outputs.has_secrets == 'true' && '⚠️ 検出' || '✅ なし' }}
            - Critical問題: ${{ steps.check-security.outputs.critical_issues }}個
            - High問題: ${{ steps.check-security.outputs.high_issues }}個

            詳細は [セキュリティログ](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) を確認してください。

            人間の介入が必要です。"

            gh issue edit "${ISSUE_NUMBER}" --add-label "ai:security-failed"
          fi