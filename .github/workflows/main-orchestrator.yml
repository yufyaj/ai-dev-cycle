name: Main Orchestrator - Auto Implementation Pipeline

on:
  issues:
    types: [opened, labeled, edited]
  pull_request:
    types: [closed]
  workflow_dispatch:
    inputs:
      force_issue_number:
        description: '特定のIssue番号を強制実行（オプション）'
        required: false
        type: string

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CLAUDE_CODE_OAUTH_TOKEN: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

jobs:
  check-and-dispatch:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: write
      pull-requests: write
      actions: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install PyGithub requests

      - name: Check trigger type
        id: trigger-check
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            if [ "${{ github.event.pull_request.merged }}" = "true" ]; then
              echo "trigger_type=pr_merged" >> $GITHUB_OUTPUT
              echo "🎉 PR #${{ github.event.pull_request.number }} がマージされました"
            else
              echo "trigger_type=skip" >> $GITHUB_OUTPUT
              echo "⏭️ PRがマージされていないためスキップ"
            fi
          elif [ "${{ github.event_name }}" = "issues" ]; then
            echo "trigger_type=issue_update" >> $GITHUB_OUTPUT
            echo "📝 Issue #${{ github.event.issue.number }} が更新されました"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "trigger_type=manual" >> $GITHUB_OUTPUT
            echo "🔧 手動実行が開始されました"
          else
            echo "trigger_type=unknown" >> $GITHUB_OUTPUT
          fi

      - name: Get prioritized issues
        if: steps.trigger-check.outputs.trigger_type != 'skip'
        id: get-issues
        run: |
          mkdir -p out
          python3 scripts/get_prioritized_issues.py

      - name: Select next issue
        if: steps.trigger-check.outputs.trigger_type != 'skip'
        id: select-issue
        run: |
          if [ -f out/prioritized_issues.json ]; then
            # 強制実行の Issue 番号がある場合はそれを使用
            if [ -n "${{ github.event.inputs.force_issue_number }}" ]; then
              ISSUE_NUMBER="${{ github.event.inputs.force_issue_number }}"
              echo "🎯 強制実行: Issue #${ISSUE_NUMBER}"
            else
              # 優先度順で最初の実行可能な Issue を選択
              ISSUE_NUMBER=$(python3 << 'EOF'
              import json
              with open('out/prioritized_issues.json', 'r') as f:
                  issues = json.load(f)
                  for issue in issues:
                      if issue['status'] == 'ready':
                          print(issue['number'])
                          break
              EOF
              )
            fi

            if [ -n "$ISSUE_NUMBER" ]; then
              echo "issue_number=${ISSUE_NUMBER}" >> $GITHUB_OUTPUT
              echo "has_issue=true" >> $GITHUB_OUTPUT
              echo "✅ 次の実装対象: Issue #${ISSUE_NUMBER}"
            else
              echo "has_issue=false" >> $GITHUB_OUTPUT
              echo "⏸️ 実行可能な Issue がありません"
            fi
          else
            echo "has_issue=false" >> $GITHUB_OUTPUT
            echo "❌ Issue リストの取得に失敗しました"
          fi

      - name: Update issue status
        if: steps.select-issue.outputs.has_issue == 'true'
        env:
          ISSUE_NUMBER: ${{ steps.select-issue.outputs.issue_number }}
        run: |
          gh issue comment "${ISSUE_NUMBER}" --body "🚀 **自動実装を開始します**

          処理フロー:
          1. ✅ Issue 解析完了
          2. ⏳ 実装中...
          3. ⏳ テスト実行待ち
          4. ⏳ レビュー待ち
          5. ⏳ セキュリティチェック待ち
          6. ⏳ PR作成待ち

          ステータス: [AI実装中...]"

          # ラベルを追加
          gh issue edit "${ISSUE_NUMBER}" --add-label "ai:implementing"

      - name: Trigger implementation workflow
        if: steps.select-issue.outputs.has_issue == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = '${{ steps.select-issue.outputs.issue_number }}';

            console.log(`🚀 Issue #${issueNumber} の実装ワークフローを起動します...`);

            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'auto-implementation.yml',
              ref: 'main',
              inputs: {
                issue_number: issueNumber
              }
            });

            console.log(`✅ Implementation ワークフローを起動しました`);

      - name: Check for more issues
        if: steps.select-issue.outputs.has_issue == 'true'
        run: |
          echo "🔄 このIssueの完了後、次のIssueの処理を続けます"